<p id="notice"><%= notice %></p>

<h1>Listing Treasures</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Lat</th>
      <th>Lng</th>
      <th>Value</th>
      <th>Start</th>
      <th>Stop</th>
      <th>Num takers</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @treasures.each do |treasure| %>
      <tr>
        <td><%= treasure.name %></td>
        <td><%= treasure.lat %></td>
        <td><%= treasure.lng %></td>
        <td><%= treasure.value %></td>
        <td><%= treasure.start %></td>
        <td><%= treasure.stop %></td>
        <td><%= treasure.num_takers %></td>
        <td><%= link_to 'Show', treasure %></td>
        <td><%= link_to 'Edit', edit_treasure_path(treasure) %></td>
        <td><%= link_to 'Destroy', treasure, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Treasure', new_treasure_path %>





<!-- Uses gem GON to communicate variables between RAILS and JS -->
<!-- See TreasureController, specificallty "gon.treasures = Treasure.all" -->

<div id="map"></div>
<div id="demo"></div>

  <style>
	  #map {
		  width: 100%;
		  height: 400px;
	  }
  </style>

  <script>
	function initMap() {
		var myLatLng = {lat: 60.644, lng: 17.000};

		/* CREATE A MAP! */
		var mapDiv = document.getElementById('map');
		var map = new google.maps.Map(mapDiv, {
			center: myLatLng,
			zoom: 10
		});

		console.log(gon.treasures);

		for(l=0; l<gon.treasures.length; l++) {

			console.log("lat : " + gon.treasures[l].lat + " lng:" + gon.treasures[l].lng);

			var p = {
				'lat': parseFloat(gon.treasures[l].lat),
				'lng': parseFloat(gon.treasures[l].lng)
			};

			var image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';

			var marker = new google.maps.Marker({
				position: p,
				map: map,
				title: gon.treasures[l].name,
				icon: image
			});
 		}

		/*map.addListener('center_changed', function() {
			// 3 seconds after the center of the map has changed, pan back to the
			// marker.
			window.setTimeout(function() {
				map.panTo(marker.getPosition());
			}, 3000);
		}); */

		/* marker.addListener('click', function() {
			map.setZoom(8);
			map.setCenter(marker.getPosition());
		});*/

		map.addListener('click', function(e) {
			placeMarkerAndPanTo(e.latLng, map);
		});

		function placeMarkerAndPanTo(latLng, map) {
			var marker = new google.maps.Marker({
				position: latLng,
				map: map
			});
			map.panTo(latLng);

			informUser(latLng.lat(), latLng.lng());
		}
	}
  </script>

<script async defer
		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLrXVDgIBkFlSsRYbzyxKDce9pRIEaekY&callback=initMap">

</script>

<script type="text/javascript">

	var x = document.getElementById("demo");
	function getLocation() {
		if (navigator.geolocation) {
			var geoOptions = {
				maximumAge: 48 * 60 * 1000
			};			navigator.geolocation.getCurrentPosition(successCb, errorCb, geoOptions);
		} else {
			x.innerHTML = "Geolocation is not supported by this browser.";
		}
	}
	function successCb(position) {
		/* x.innerHTML = "Latitude: " + position.coords.latitude +
		"<br>Longitude: " + position.coords.longitude; */
		informUser(position.coords.latitude, position.coords.longitude);


		var latlon = position.coords.latitude + "," + position.coords.longitude;

		var img_url = "http://maps.googleapis.com/maps/api/staticmap?center=" + latlon + "&zoom=14&size=400x300&sensor=false";

		document.getElementById("map").innerHTML = "<img src='"+img_url+"'>";
	}

	function informUser(lat, lng) {
		x.innerHTML = "Lat: " + lat + "Long: " + lng;

	}

	function errorCb(error) {
		switch(error.code) {
			case error.PERMISSION_DENIED:
				x.innerHTML = "User denied the request for Geolocation."
				break;
			case error.POSITION_UNAVAILABLE:
				x.innerHTML = "Location information is unavailable."
				break;
			case error.TIMEOUT:
				x.innerHTML = "The request to get user location timed out."
				break;
			case error.UNKNOWN_ERROR:
				x.innerHTML = "An unknown error occurred."
				break;
		}
	}
	getLocation();


</script>